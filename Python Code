from google.colab import files

# Upload both files (train and test)
uploaded = files.upload()



import pandas as pd
import numpy as np
import re
import string
import nltk
import spacy
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay

# Download required NLTK data
nltk.download('stopwords')
nltk.download('wordnet')
from nltk.corpus import stopwords

# Load English tokenizer, POS tagger, lemmatizer, etc.
nlp = spacy.load("en_core_web_sm")
stop_words = set(stopwords.words('english'))

# -------------------------------
# Preprocessing Function
# -------------------------------
def preprocess_text(text):
    if pd.isnull(text):
        return ""
    # Lowercase
    text = text.lower()
    # Remove punctuation and numbers
    text = re.sub(f'[{re.escape(string.punctuation)}0-9]', ' ', text)
    # Remove extra spaces
    text = re.sub(r'\s+', ' ', text).strip()
    # Tokenize, remove stopwords, and lemmatize
    doc = nlp(text)
    tokens = [
        token.lemma_
        for token in doc
        if token.text not in stop_words and not token.is_punct and not token.is_space
    ]
    return ' '.join(tokens)

# -------------------------------
# Rule-based Keyword Categorizer
# -------------------------------
def keyword_category(feedback):
    feedback = feedback.lower()
    if any(word in feedback for word in ["faculty", "lecture", "professor", "lab", "class", "notes", "exam"]):
        return "Academics"
    elif any(word in feedback for word in ["hostel", "mess", "food", "bathroom", "room", "cleaned"]):
        return "Hostel & Mess"
    elif any(word in feedback for word in ["admin", "office", "documents", "approval", "staff", "processing"]):
        return "Administration"
    elif any(word in feedback for word in ["gym", "sports", "fest", "event", "club", "drama", "dance"]):
        return "Extracurricular"
    elif any(word in feedback for word in ["wifi", "ac", "air conditioner", "library", "equipment", "fan"]):
        return "Facilities"
    else:
        return "Uncategorized"

# -------------------------------
# Load Data
# -------------------------------
train_df = pd.read_csv('college_feedback_train.csv')
test_df = pd.read_csv('college_feedback_test.csv')

# Ensure consistent column naming
train_df.rename(columns={'Feedback': 'feedback'}, inplace=True)
test_df.rename(columns={'Feedback': 'feedback'}, inplace=True)

# Add category if not present
if 'category' not in train_df.columns:
    if 'Label' in train_df.columns:
        train_df.rename(columns={'Label': 'category'}, inplace=True)
    else:
        train_df['category'] = train_df['feedback'].apply(keyword_category)

# -------------------------------
# Preprocess Feedback Text
# -------------------------------
print("Preprocessing text... this might take a minute.")
train_df['clean_feedback'] = train_df['feedback'].apply(preprocess_text)
test_df['clean_feedback'] = test_df['feedback'].apply(preprocess_text)

# -------------------------------
# Feature Extraction
# -------------------------------
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(train_df['clean_feedback'])
y = train_df['category']

# Split for validation
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# -------------------------------
# Train Model
# -------------------------------
clf = LogisticRegression(max_iter=300, random_state=42)
clf.fit(X_train, y_train)

# -------------------------------
# Validation Results
# -------------------------------
y_pred_val = clf.predict(X_val)
print("\nClassification Report (Validation):")
print(classification_report(y_val, y_pred_val))

cm = confusion_matrix(y_val, y_pred_val, labels=clf.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)
fig, ax = plt.subplots(figsize=(8, 6))
disp.plot(ax=ax, cmap="Blues")
plt.title("Confusion Matrix - Validation Set")
plt.tight_layout()
plt.show()

# -------------------------------
# Predict on Test Data
# -------------------------------
X_test = vectorizer.transform(test_df['clean_feedback'])
test_df['predicted_category'] = clf.predict(X_test)

# Save results
output_file = 'classified_feedback_output.csv'
test_df.to_csv(output_file, index=False)
print(f"\nâœ… Test predictions saved to '{output_file}'.")

# -------------------------------
# Visualize Category Distribution
# -------------------------------
plt.figure(figsize=(7, 4))
sns.countplot(
    x='predicted_category',
    data=test_df,
    order=test_df['predicted_category'].value_counts().index
)
plt.title("Predicted Feedback Category Distribution (Test Set)")
plt.xticks(rotation=30)
plt.tight_layout()
plt.show()

# -------------------------------
# Interactive Feedback Prediction
# -------------------------------
while True:
    user_feedback = input("\nEnter a feedback message (or type 'exit' to quit): ")
    if user_feedback.lower() == 'exit':
        print("Exiting program.")
        break

    cleaned = preprocess_text(user_feedback)
    vectorized = vectorizer.transform([cleaned])
    prediction = clf.predict(vectorized)[0]
    print(f"Predicted Category: ðŸŽ¯ {prediction}")

output = pd.read_csv('classified_feedback_output.csv')
output.head(50)
